{
    "collab_server" : "",
    "contents" : "#\n# This is the server logic of a Shiny web application. You can run the \n# application by clicking 'Run App' above.\n#\n# Find out more about building applications with Shiny here:\n# \n#    http://shiny.rstudio.com/\n#\n\nlibrary(shiny)\nlibrary(vkR)\nlibrary(igraph)\n# source(\"LDA.R\")\noptions(shiny.maxRequestSize=100*1024^2)\n\n# Define server logic required to draw a histogram\nshinyServer(\n  function(input, output) {\n    \n    output$value <- renderTable({\n      if(is.null(input$file))     return(NULL)\n      inFile <<- input$file\n      # read.csv(inFile$datapath)\n      docs_list <- readLines(inFile$datapath)\n      \n      doc_list <<- clear_text(docs_list, patterns = list(\"[|]\\\\w+\"))\n      doc_list <<- strsplit(doc_list, \"[[:space:]]+\")\n      head(doc_list)\n      \n      term.table <<- table(unlist(doc_list))\n      term.table <<- sort(term.table, decreasing = TRUE)\n      head(term.table, 10)\n      \n    })\n    \n    output$delete_stop_words <- renderTable({\n      # if(is.null(input$file2))     return(NULL)\n      if(is.null(input$file))     return(NULL)\n      paste(\"You have selected\", input$file)\n      \n      # inFile_stop_words <<- input$file2\n      # test_stop_words <- readLines(inFile_stop_words$datapath)\n      # stop_words <- get_stop_words(c(test_stop_words))\n      \n      stop_words <- get_stop_words(c(\"вообще\", \"например\", \"вроде\", \"наверное\", \"думаю\", \"давай\",\n                                     \"етот\", \"поэтому\", \"кстати\", \"вакцина\", \"прививка\", \"большой\",\n                                     \"свой\", \"вакцинация\", \"|\", \"делать\", \"говорить\", \"думать\",\n                                     \"писать\", \"=\", \"знать\", \"читать\", \"самый\", \"хороший\", \"ничто\", \"никто\",\n                                     \"группа\", \"написать\", \"ребенок\"))\n      del <- names(term.table) %in% stop_words | term.table < 5\n      term.table <<- term.table[!del]\n      vocab <<- names(term.table)\n      head(vocab)\n      \n    })\n    \n    \n    output$modelling <- renderPlot({\n      if(is.null(input$file))     return(NULL)\n      paste(\"You have selected\", input$slider1)\n      paste(\"You have selected\", input$file)\n      get.terms <- function(x) {\n        index <<- match(x, vocab)\n        index <<- index[!is.na(index)]\n        rbind(as.integer(index - 1), as.integer(rep(1, length(index))))\n      }\n      documents <<- lapply(doc_list, get.terms)\n      K <<- input$slider1\n      G <- 1000 \n      alpha <- 0.02 \n      eta <- 0.02 \n      \n      D <- length(documents)\n      W <<- length(vocab)\n      doc.length <- sapply(documents, function(x) sum(x[2, ]))\n      N <- sum(doc.length)\n      term.frequency <- as.integer(term.table)\n      \n      fit <- lda.collapsed.gibbs.sampler(documents = documents, K = K, vocab = vocab, \n                                         num.iterations = G, alpha = alpha, \n                                         eta = eta, initial = NULL, burnin = 0,\n                                         compute.log.likelihood = TRUE)\n      \n      theta <- t(apply(fit$document_sums + alpha, 2, function(x) x/sum(x)))\n      phi <- t(apply(t(fit$topics) + eta, 2, function(x) x/sum(x)))\n      \n      results <- list(phi = phi,\n                      theta = theta,\n                      doc.length = doc.length,\n                      vocab = vocab,\n                      term.frequency = term.frequency)\n      \n      \n      json <- createJSON(phi = results$phi, \n                         theta = results$theta, \n                         doc.length = results$doc.length, \n                         vocab = results$vocab, \n                         term.frequency = results$term.frequency)\n      \n      serVis(json, out.dir = './', open.browser = TRUE)\n      \n    })\n    \n    # output$action_value <- renderText({\n    #   if(is.null(input$action))     return(NULL)\n    #   button_value <- input$action\n    #   rm(list=ls())\n    # })\n    \n  }\n)",
    "created" : 1481223270103.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3778465091",
    "id" : "6E2BC990",
    "lastKnownWriteTime" : 1481660371,
    "last_content_update" : 1481660371378,
    "path" : "~/vkR_Shiny/LDA/server.R",
    "project_path" : "LDA/server.R",
    "properties" : {
    },
    "relative_order" : 1,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}